.. _dynamic_operation:

*************************
Operation of Dynamic RASE
*************************

Dynamic RASE is currently only operated as a command line tool. User control of Dynamic RASE is achieved via configuration files in the .yaml format.
The user will indicate the location of these .yaml files in the command line argument as follows:

    dynamic_rase.exe -c FILES

FILES can be one or more .yaml files. The user is suggested to divide the available configuration settings into three files:

- A "configuration" file, which contains key path information and various toggles,
- a "definition" file which defines the available tests, scenarios, detectors, sources, plots, and scores of interest
- a "run" file, which contains the particular operations desired and the specific tests, plots and scores (from those in the definitions file) those operations should be performed on

Sample files, documenting the configuration settings available, are distributed with Dynamic RASE.

This document serves as an overview of those options, while specific user-defined configurations should reference the sample files for further details.


config.yaml
===========

This file is used to define all paths used by Dynamic RASE (to directories and files), which are all relative by default. These fields can be changed to alternative relative paths or to absolute paths. The config.yaml file also has various toggles, which can be set to "True" or "False" (without quotations):

    *  output_files: Should all output generated by Dynamic RASE be saved? This includes scores (saved to a text file), spectra (saved as .n42 files), plots (saved as images)
    *  print_scores: Should scores be printed to screen?
    *  generate_plots: Should user-specified plots be created?
    *  replay_files: Should replay tools be run?


definitions.yaml
================

This file sets the definitions for all the key pieces for any Dynamic RASE simulation. This includes the definition for detectors, replay tools, scenarios, tests, scoring approaches, and plotting methods. Samples for all of these definitions are provided in the "definitions_example.yaml" file. For information about all keywords and possible model selections, see :ref:`dynamic_models`.

    *  "detectors" are where instruments are defined. Each detector definition includes calibration coefficients, channel count, location of base spectra for each source, and the replay tool/translator associated with the detector (if any)
    *  "replay_tools" are where the replay tools are defined. Each definition includes the name of the tool, the path to the tool, and the format of the inputs
    *  "scenarios" is where key information is set that describes the relative path taken by the source/instrument. Scenarios include specification of the source(s), background(s), the path taken, time to traverse the path, length of each spectrum record, and Dynamic RASE spectrum sampling rate (samples/sec) along the path.
        * ** Note, many detectors with dynamic recording create spectrum records with a fixed time. It falls to the user to be aware of this fact such that the sampling rate is set to a value larger than the spectrum record length (e.g.: if the detector records spectra with 0.2 sec time steps, sample_hz should be set to â‰¥ 5). Failing to consider this could result in an inaccurate representation of detector/replay tool performance.**
    *  "tests" are where bundles are defined that tie together a scenario, a detector, and a model. Each test also defines which spectrum acquisition locations are used to build the detector response model, as well as over which energy bins (the "roi") to define the detector response model.
    *  "scores" are where scorers are defined. Each scorer specifies a scoring model to use, the test that uses the model the scorer is to be run on, the bins to run the scorer on (the "roi"), and the locations used to calculate the score.
    *  "plots" are where plotting units are defined. Each plotting unit defines one or more plotting models to use, the dimensions of those models, if error should be plotted, if the model data (1/r^2 adjusted) or the real data (not 1/r^2 adjusted), the tests that use the model the plotter is to be run on, a scorer (if any), positions (if necessary for the plotting model), and the energy bins of the models to create plots for


run.yaml
========

This file specifies which tests, scorers, and plotters to simulate in a run. This file will call the relevant tests, scorers, and plotters from the definitions yaml file that is provided in the command line argument.
